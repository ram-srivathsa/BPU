//
// Generated by Bluespec Compiler, version 2017.07.A (build 1da80f1, 2017-07-21)
//
// On Thu Jun 14 11:24:55 IST 2018
//
//
// Ports:
// Name                         I/O  size props
// RDY_ma_put                     O     1 const
// mn_get                         O    23
// RDY_mn_get                     O     1 const
// RDY_ma_train                   O     1
// RDY_ma_flush                   O     1
// CLK                            I     1 clock
// RST_N                          I     1 reset
// ma_put_pc                      I    32
// ma_train_training_data         I    56
// EN_ma_put                      I     1
// EN_ma_train                    I     1
// EN_ma_flush                    I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkbranch(CLK,
		RST_N,

		ma_put_pc,
		EN_ma_put,
		RDY_ma_put,

		mn_get,
		RDY_mn_get,

		ma_train_training_data,
		EN_ma_train,
		RDY_ma_train,

		EN_ma_flush,
		RDY_ma_flush);
  input  CLK;
  input  RST_N;

  // action method ma_put
  input  [31 : 0] ma_put_pc;
  input  EN_ma_put;
  output RDY_ma_put;

  // value method mn_get
  output [22 : 0] mn_get;
  output RDY_mn_get;

  // action method ma_train
  input  [55 : 0] ma_train_training_data;
  input  EN_ma_train;
  output RDY_ma_train;

  // action method ma_flush
  input  EN_ma_flush;
  output RDY_ma_flush;

  // signals for module outputs
  wire [22 : 0] mn_get;
  wire RDY_ma_flush, RDY_ma_put, RDY_ma_train, RDY_mn_get;

  // register random_bank0_initialized
  reg random_bank0_initialized;
  wire random_bank0_initialized$D_IN, random_bank0_initialized$EN;

  // register random_bank1_initialized
  reg random_bank1_initialized;
  wire random_bank1_initialized$D_IN, random_bank1_initialized$EN;

  // register random_bank2_initialized
  reg random_bank2_initialized;
  wire random_bank2_initialized$D_IN, random_bank2_initialized$EN;

  // register rg_bank1_csr_p
  reg [7 : 0] rg_bank1_csr_p;
  wire [7 : 0] rg_bank1_csr_p$D_IN;
  wire rg_bank1_csr_p$EN;

  // register rg_bank1_csr_s
  reg [6 : 0] rg_bank1_csr_s;
  wire [6 : 0] rg_bank1_csr_s$D_IN;
  wire rg_bank1_csr_s$EN;

  // register rg_bank2_csr_indx
  reg [9 : 0] rg_bank2_csr_indx;
  wire [9 : 0] rg_bank2_csr_indx$D_IN;
  wire rg_bank2_csr_indx$EN;

  // register rg_bank2_csr_p
  reg [7 : 0] rg_bank2_csr_p;
  wire [7 : 0] rg_bank2_csr_p$D_IN;
  wire rg_bank2_csr_p$EN;

  // register rg_bank2_csr_s
  reg [6 : 0] rg_bank2_csr_s;
  wire [6 : 0] rg_bank2_csr_s$D_IN;
  wire rg_bank2_csr_s$EN;

  // register rg_bank3_csr_indx
  reg [9 : 0] rg_bank3_csr_indx;
  wire [9 : 0] rg_bank3_csr_indx$D_IN;
  wire rg_bank3_csr_indx$EN;

  // register rg_bank3_csr_p
  reg [7 : 0] rg_bank3_csr_p;
  wire [7 : 0] rg_bank3_csr_p$D_IN;
  wire rg_bank3_csr_p$EN;

  // register rg_bank3_csr_s
  reg [6 : 0] rg_bank3_csr_s;
  wire [6 : 0] rg_bank3_csr_s$D_IN;
  wire rg_bank3_csr_s$EN;

  // register rg_bank4_csr_indx
  reg [9 : 0] rg_bank4_csr_indx;
  wire [9 : 0] rg_bank4_csr_indx$D_IN;
  wire rg_bank4_csr_indx$EN;

  // register rg_bank4_csr_p
  reg [7 : 0] rg_bank4_csr_p;
  wire [7 : 0] rg_bank4_csr_p$D_IN;
  wire rg_bank4_csr_p$EN;

  // register rg_bank4_csr_s
  reg [6 : 0] rg_bank4_csr_s;
  wire [6 : 0] rg_bank4_csr_s$D_IN;
  wire rg_bank4_csr_s$EN;

  // register rg_bimodal_flush_addr
  reg [12 : 0] rg_bimodal_flush_addr;
  wire [12 : 0] rg_bimodal_flush_addr$D_IN;
  wire rg_bimodal_flush_addr$EN;

  // register rg_flush
  reg rg_flush;
  wire rg_flush$D_IN, rg_flush$EN;

  // register rg_global_flush_addr
  reg [10 : 0] rg_global_flush_addr;
  wire [10 : 0] rg_global_flush_addr$D_IN;
  wire rg_global_flush_addr$EN;

  // register rg_global_history
  reg [79 : 0] rg_global_history;
  wire [79 : 0] rg_global_history$D_IN;
  wire rg_global_history$EN;

  // register rg_init_rand
  reg rg_init_rand;
  wire rg_init_rand$D_IN, rg_init_rand$EN;

  // register rg_pc_copy
  reg [31 : 0] rg_pc_copy;
  wire [31 : 0] rg_pc_copy$D_IN;
  wire rg_pc_copy$EN;

  // ports of submodule bram_bank1
  wire [11 : 0] bram_bank1$DIA, bram_bank1$DIB, bram_bank1$DOA;
  wire [9 : 0] bram_bank1$ADDRA, bram_bank1$ADDRB;
  wire bram_bank1$ENA, bram_bank1$ENB, bram_bank1$WEA, bram_bank1$WEB;

  // ports of submodule bram_bank2
  wire [11 : 0] bram_bank2$DIA, bram_bank2$DIB, bram_bank2$DOA;
  wire [9 : 0] bram_bank2$ADDRA, bram_bank2$ADDRB;
  wire bram_bank2$ENA, bram_bank2$ENB, bram_bank2$WEA, bram_bank2$WEB;

  // ports of submodule bram_bank3
  wire [11 : 0] bram_bank3$DIA, bram_bank3$DIB, bram_bank3$DOA;
  wire [9 : 0] bram_bank3$ADDRA, bram_bank3$ADDRB;
  wire bram_bank3$ENA, bram_bank3$ENB, bram_bank3$WEA, bram_bank3$WEB;

  // ports of submodule bram_bank4
  wire [11 : 0] bram_bank4$DIA, bram_bank4$DIB, bram_bank4$DOA;
  wire [9 : 0] bram_bank4$ADDRA, bram_bank4$ADDRB;
  wire bram_bank4$ENA, bram_bank4$ENB, bram_bank4$WEA, bram_bank4$WEB;

  // ports of submodule bram_bimodal
  wire [11 : 0] bram_bimodal$ADDRA, bram_bimodal$ADDRB;
  wire [3 : 0] bram_bimodal$DIA, bram_bimodal$DIB, bram_bimodal$DOA;
  wire bram_bimodal$ENA, bram_bimodal$ENB, bram_bimodal$WEA, bram_bimodal$WEB;

  // ports of submodule random_bank0
  wire [2 : 0] random_bank0$OUT;
  wire random_bank0$EN;

  // ports of submodule random_bank1
  wire [2 : 0] random_bank1$OUT;
  wire random_bank1$EN;

  // ports of submodule random_bank2
  wire [2 : 0] random_bank2$OUT;
  wire random_bank2$EN;

  // inputs to muxes for submodule ports
  wire [12 : 0] MUX_rg_bimodal_flush_addr$write_1__VAL_1;
  wire [11 : 0] MUX_bram_bank1$b_put_3__VAL_2,
		MUX_bram_bank2$b_put_3__VAL_2,
		MUX_bram_bank3$b_put_3__VAL_2,
		MUX_bram_bank4$b_put_3__VAL_2;
  wire [10 : 0] MUX_rg_global_flush_addr$write_1__VAL_1;
  wire [9 : 0] MUX_bram_bank1$b_put_2__VAL_2,
	       MUX_bram_bank2$b_put_2__VAL_2,
	       MUX_bram_bank3$b_put_2__VAL_2,
	       MUX_bram_bank4$b_put_2__VAL_2;
  wire [3 : 0] MUX_bram_bimodal$b_put_3__VAL_2;
  wire MUX_bram_bank1$b_put_1__SEL_1,
       MUX_bram_bank1$b_put_1__SEL_2,
       MUX_bram_bimodal$b_put_1__SEL_1,
       MUX_rg_flush$write_1__SEL_1;

  // remaining internal signals
  reg [11 : 0] CASE_ma_train_training_data_BITS_5_TO_3_0_IF_m_ETC__q1,
	       CASE_ma_train_training_data_BITS_5_TO_3_0_IF_m_ETC__q2,
	       IF_ma_train_training_data_BITS_5_TO_3_40_EQ_0__ETC___d400,
	       IF_ma_train_training_data_BITS_5_TO_3_40_EQ_0__ETC___d402,
	       IF_ma_train_training_data_BITS_5_TO_3_40_EQ_0__ETC___d440,
	       IF_ma_train_training_data_BITS_5_TO_3_40_EQ_0__ETC___d442;
  wire [11 : 0] IF_ma_train_training_data_BITS_21_TO_19_42_EQ__ETC___d322,
		IF_ma_train_training_data_BITS_21_TO_19_42_EQ__ETC___d328,
		IF_ma_train_training_data_BITS_5_TO_3_40_EQ_0__ETC___d323,
		IF_ma_train_training_data_BITS_5_TO_3_40_EQ_0__ETC___d329,
		IF_ma_train_training_data_BIT_22_37_THEN_IF_ma_ETC___d310,
		x3__h10617,
		x3__h10688,
		x3__h16130,
		x3__h6884,
		x3__h7017,
		x3__h8893;
  wire [9 : 0] x__h4921, x__h7302;
  wire [7 : 0] IF_wr_bank3_out_wget__5_BITS_8_TO_1_2_EQ_rg_pc_ETC___d81,
	       lv_new_tag1__h5129,
	       lv_new_tag2__h5130,
	       lv_new_tag3__h5131,
	       lv_new_tag4__h5132,
	       mn_get_tag__h5005,
	       x__h11721,
	       x__h11953,
	       x__h12000,
	       x__h12047,
	       x__h2833,
	       x__h2903,
	       x__h2972,
	       x__h3041,
	       y__h11722,
	       y__h11954,
	       y__h12001,
	       y__h12048,
	       y__h2797,
	       y__h2867,
	       y__h2936,
	       y__h3005;
  wire [4 : 0] mn_get_bank_bits__h5006;
  wire [2 : 0] IF_ma_train_training_data_BITS_5_TO_3_40_EQ_0__ETC___d273,
	       IF_ma_train_training_data_BITS_5_TO_3_40_EQ_0__ETC___d275,
	       IF_ma_train_training_data_BIT_10_77_OR_ma_trai_ETC___d325,
	       IF_ma_train_training_data_BIT_10_77_THEN_0b11__ETC___d313,
	       IF_wr_bank2_out_wget__3_BITS_8_TO_1_0_EQ_rg_pc_ETC___d76,
	       IF_wr_bank3_out_wget__5_BITS_8_TO_1_2_EQ_rg_pc_ETC___d85,
	       ma_train_training_data_BITS_21_TO_19_42_MINUS_1___d274,
	       ma_train_training_data_BITS_21_TO_19_42_PLUS_1___d271,
	       x__h5046,
	       x__h5062;
  wire IF_ma_train_training_data_BIT_23_36_THEN_IF_ma_ETC___d149,
       IF_ma_train_training_data_BIT_23_36_THEN_IF_ma_ETC___d159,
       IF_ma_train_training_data_BIT_23_36_THEN_IF_ma_ETC___d169,
       IF_ma_train_training_data_BIT_23_36_THEN_IF_ma_ETC___d180,
       IF_ma_train_training_data_BIT_23_36_THEN_IF_ma_ETC___d190,
       IF_ma_train_training_data_BIT_23_36_THEN_IF_ma_ETC___d198,
       IF_ma_train_training_data_BIT_23_36_THEN_IF_ma_ETC___d206,
       IF_ma_train_training_data_BIT_23_36_THEN_IF_ma_ETC___d220,
       IF_ma_train_training_data_BIT_23_36_THEN_IF_ma_ETC___d229,
       IF_ma_train_training_data_BIT_23_36_THEN_IF_ma_ETC___d238,
       IF_wr_bank2_out_wget__3_BITS_8_TO_1_0_EQ_rg_pc_ETC___d68,
       INV_rg_global_history_08_BIT_19_42_43_XOR_rg_b_ETC___d145,
       INV_rg_global_history_08_BIT_39_52_53_XOR_rg_b_ETC___d155,
       INV_rg_global_history_08_BIT_79_62_63_XOR_rg_b_ETC___d165,
       NOT_ma_train_training_data_BITS_5_TO_3_40_EQ_0_ETC___d389,
       NOT_ma_train_training_data_BIT_23_36_64_AND_ma_ETC___d351,
       NOT_ma_train_training_data_BIT_23_36_64_AND_ma_ETC___d430,
       ma_train_training_data_BITS_5_TO_3_40_EQ_1_47__ETC___d427,
       ma_train_training_data_BIT_23_36_AND_ma_train__ETC___d269,
       ma_train_training_data_BIT_23_36_AND_ma_train__ETC___d392,
       mn_get_prediction__h5003,
       wr_bank1_out_wget__1_BITS_8_TO_1_8_EQ_rg_pc_co_ETC___d64,
       wr_bank2_out_wget__3_BITS_8_TO_1_0_EQ_rg_pc_co_ETC___d56,
       wr_bank3_out_wget__5_BITS_8_TO_1_2_EQ_rg_pc_co_ETC___d48,
       wr_bank4_out_wget__7_BITS_8_TO_1_2_EQ_rg_pc_co_ETC___d40,
       x__h10105,
       x__h10254,
       x__h10403,
       x__h14731,
       x__h14807,
       x__h14883,
       x__h14980,
       x__h15128,
       x__h15255,
       x__h15331,
       x__h15428,
       x__h15696,
       x__h15844,
       x__h9208,
       x__h9681,
       x__h9736,
       x__h9737,
       x__h9813,
       x__h9814,
       x__h9984;

  // action method ma_put
  assign RDY_ma_put = 1'd1 ;

  // value method mn_get
  assign mn_get =
	     { mn_get_prediction__h5003,
	       x__h5046,
	       mn_get_tag__h5005,
	       mn_get_bank_bits__h5006,
	       x__h5062,
	       bram_bimodal$DOA[3:1] } ;
  assign RDY_mn_get = 1'b1 ;

  // action method ma_train
  assign RDY_ma_train =
	     !rg_flush && random_bank0_initialized &&
	     random_bank1_initialized &&
	     random_bank2_initialized ;

  // action method ma_flush
  assign RDY_ma_flush = !rg_flush ;

  // submodule bram_bank1
  BRAM2Load #(.FILENAME("bank1.bin"),
	      .PIPELINED(1'd0),
	      .ADDR_WIDTH(32'd10),
	      .DATA_WIDTH(32'd12),
	      .MEMSIZE(11'd1024),
	      .BINARY(1'd1)) bram_bank1(.CLKA(CLK),
					.CLKB(CLK),
					.ADDRA(bram_bank1$ADDRA),
					.ADDRB(bram_bank1$ADDRB),
					.DIA(bram_bank1$DIA),
					.DIB(bram_bank1$DIB),
					.WEA(bram_bank1$WEA),
					.WEB(bram_bank1$WEB),
					.ENA(bram_bank1$ENA),
					.ENB(bram_bank1$ENB),
					.DOA(bram_bank1$DOA),
					.DOB());

  // submodule bram_bank2
  BRAM2Load #(.FILENAME("bank2.bin"),
	      .PIPELINED(1'd0),
	      .ADDR_WIDTH(32'd10),
	      .DATA_WIDTH(32'd12),
	      .MEMSIZE(11'd1024),
	      .BINARY(1'd1)) bram_bank2(.CLKA(CLK),
					.CLKB(CLK),
					.ADDRA(bram_bank2$ADDRA),
					.ADDRB(bram_bank2$ADDRB),
					.DIA(bram_bank2$DIA),
					.DIB(bram_bank2$DIB),
					.WEA(bram_bank2$WEA),
					.WEB(bram_bank2$WEB),
					.ENA(bram_bank2$ENA),
					.ENB(bram_bank2$ENB),
					.DOA(bram_bank2$DOA),
					.DOB());

  // submodule bram_bank3
  BRAM2Load #(.FILENAME("bank3.bin"),
	      .PIPELINED(1'd0),
	      .ADDR_WIDTH(32'd10),
	      .DATA_WIDTH(32'd12),
	      .MEMSIZE(11'd1024),
	      .BINARY(1'd1)) bram_bank3(.CLKA(CLK),
					.CLKB(CLK),
					.ADDRA(bram_bank3$ADDRA),
					.ADDRB(bram_bank3$ADDRB),
					.DIA(bram_bank3$DIA),
					.DIB(bram_bank3$DIB),
					.WEA(bram_bank3$WEA),
					.WEB(bram_bank3$WEB),
					.ENA(bram_bank3$ENA),
					.ENB(bram_bank3$ENB),
					.DOA(bram_bank3$DOA),
					.DOB());

  // submodule bram_bank4
  BRAM2Load #(.FILENAME("bank4.bin"),
	      .PIPELINED(1'd0),
	      .ADDR_WIDTH(32'd10),
	      .DATA_WIDTH(32'd12),
	      .MEMSIZE(11'd1024),
	      .BINARY(1'd1)) bram_bank4(.CLKA(CLK),
					.CLKB(CLK),
					.ADDRA(bram_bank4$ADDRA),
					.ADDRB(bram_bank4$ADDRB),
					.DIA(bram_bank4$DIA),
					.DIB(bram_bank4$DIB),
					.WEA(bram_bank4$WEA),
					.WEB(bram_bank4$WEB),
					.ENA(bram_bank4$ENA),
					.ENB(bram_bank4$ENB),
					.DOA(bram_bank4$DOA),
					.DOB());

  // submodule bram_bimodal
  BRAM2Load #(.FILENAME("bimodal.bin"),
	      .PIPELINED(1'd0),
	      .ADDR_WIDTH(32'd12),
	      .DATA_WIDTH(32'd4),
	      .MEMSIZE(13'd4096),
	      .BINARY(1'd1)) bram_bimodal(.CLKA(CLK),
					  .CLKB(CLK),
					  .ADDRA(bram_bimodal$ADDRA),
					  .ADDRB(bram_bimodal$ADDRB),
					  .DIA(bram_bimodal$DIA),
					  .DIB(bram_bimodal$DIB),
					  .WEA(bram_bimodal$WEA),
					  .WEB(bram_bimodal$WEB),
					  .ENA(bram_bimodal$ENA),
					  .ENB(bram_bimodal$ENB),
					  .DOA(bram_bimodal$DOA),
					  .DOB());

  // submodule random_bank0
  ConstrainedRandom #(.width(32'd3),
		      .min(3'd1),
		      .max(3'd4)) random_bank0(.RST(RST_N),
					       .CLK(CLK),
					       .EN(random_bank0$EN),
					       .OUT(random_bank0$OUT));

  // submodule random_bank1
  ConstrainedRandom #(.width(32'd3),
		      .min(3'd2),
		      .max(3'd4)) random_bank1(.RST(RST_N),
					       .CLK(CLK),
					       .EN(random_bank1$EN),
					       .OUT(random_bank1$OUT));

  // submodule random_bank2
  ConstrainedRandom #(.width(32'd3),
		      .min(3'd3),
		      .max(3'd4)) random_bank2(.RST(RST_N),
					       .CLK(CLK),
					       .EN(random_bank2$EN),
					       .OUT(random_bank2$OUT));

  // inputs to muxes for submodule ports
  assign MUX_bram_bank1$b_put_1__SEL_1 =
	     rg_flush && !rg_global_flush_addr[10] ;
  assign MUX_bram_bank1$b_put_1__SEL_2 =
	     EN_ma_train &&
	     (ma_train_training_data[23] &&
	      ma_train_training_data[5:3] == 3'd1 ||
	      !ma_train_training_data[23] &&
	      (ma_train_training_data[5:3] == 3'd0 &&
	       (ma_train_training_data[9:6] == 4'b1111 &&
		random_bank0$OUT == 3'd1 ||
		!ma_train_training_data[9]) ||
	       ma_train_training_data[5:3] == 3'd1)) ;
  assign MUX_bram_bimodal$b_put_1__SEL_1 =
	     rg_flush && !rg_bimodal_flush_addr[12] ;
  assign MUX_rg_flush$write_1__SEL_1 = rg_flush && rg_bimodal_flush_addr[12] ;
  assign MUX_bram_bank1$b_put_2__VAL_2 = x__h7302 ^ rg_global_history[9:0] ;
  assign MUX_bram_bank1$b_put_3__VAL_2 =
	     ma_train_training_data[23] ?
	       IF_ma_train_training_data_BIT_22_37_THEN_IF_ma_ETC___d310 :
	       (ma_train_training_data[22] ?
		  IF_ma_train_training_data_BITS_5_TO_3_40_EQ_0__ETC___d323 :
		  IF_ma_train_training_data_BITS_5_TO_3_40_EQ_0__ETC___d329) ;
  assign MUX_bram_bank2$b_put_2__VAL_2 = x__h7302 ^ rg_bank2_csr_indx ;
  assign MUX_bram_bank2$b_put_3__VAL_2 =
	     ma_train_training_data[23] ?
	       IF_ma_train_training_data_BIT_22_37_THEN_IF_ma_ETC___d310 :
	       (ma_train_training_data[22] ?
		  CASE_ma_train_training_data_BITS_5_TO_3_0_IF_m_ETC__q1 :
		  CASE_ma_train_training_data_BITS_5_TO_3_0_IF_m_ETC__q2) ;
  assign MUX_bram_bank3$b_put_2__VAL_2 = x__h7302 ^ rg_bank3_csr_indx ;
  assign MUX_bram_bank3$b_put_3__VAL_2 =
	     ma_train_training_data[23] ?
	       IF_ma_train_training_data_BIT_22_37_THEN_IF_ma_ETC___d310 :
	       (ma_train_training_data[22] ?
		  IF_ma_train_training_data_BITS_5_TO_3_40_EQ_0__ETC___d400 :
		  IF_ma_train_training_data_BITS_5_TO_3_40_EQ_0__ETC___d402) ;
  assign MUX_bram_bank4$b_put_2__VAL_2 = x__h7302 ^ rg_bank4_csr_indx ;
  assign MUX_bram_bank4$b_put_3__VAL_2 =
	     ma_train_training_data[23] ?
	       IF_ma_train_training_data_BIT_22_37_THEN_IF_ma_ETC___d310 :
	       (ma_train_training_data[22] ?
		  IF_ma_train_training_data_BITS_5_TO_3_40_EQ_0__ETC___d440 :
		  IF_ma_train_training_data_BITS_5_TO_3_40_EQ_0__ETC___d442) ;
  assign MUX_bram_bimodal$b_put_3__VAL_2 =
	     ma_train_training_data[23] ?
	       { ma_train_training_data[22] ?
		   IF_ma_train_training_data_BITS_5_TO_3_40_EQ_0__ETC___d273 :
		   IF_ma_train_training_data_BITS_5_TO_3_40_EQ_0__ETC___d275,
		 ma_train_training_data[5:3] != 3'd0 ||
		 ma_train_training_data[10] } :
	       { ma_train_training_data[22] ?
		   IF_ma_train_training_data_BITS_5_TO_3_40_EQ_0__ETC___d275 :
		   IF_ma_train_training_data_BITS_5_TO_3_40_EQ_0__ETC___d273,
		 ma_train_training_data[5:3] == 3'd0 &&
		 ma_train_training_data[10] } ;
  assign MUX_rg_bimodal_flush_addr$write_1__VAL_1 =
	     rg_bimodal_flush_addr + 13'd1 ;
  assign MUX_rg_global_flush_addr$write_1__VAL_1 =
	     rg_global_flush_addr + 11'd1 ;

  // register random_bank0_initialized
  assign random_bank0_initialized$D_IN = 1'd1 ;
  assign random_bank0_initialized$EN = rg_init_rand ;

  // register random_bank1_initialized
  assign random_bank1_initialized$D_IN = 1'd1 ;
  assign random_bank1_initialized$EN = rg_init_rand ;

  // register random_bank2_initialized
  assign random_bank2_initialized$D_IN = 1'd1 ;
  assign random_bank2_initialized$EN = rg_init_rand ;

  // register rg_bank1_csr_p
  assign rg_bank1_csr_p$D_IN =
	     { rg_bank1_csr_p[6],
	       x__h14980,
	       rg_bank1_csr_p[4:0],
	       IF_ma_train_training_data_BIT_23_36_THEN_IF_ma_ETC___d180 } ;
  assign rg_bank1_csr_p$EN = EN_ma_train ;

  // register rg_bank1_csr_s
  assign rg_bank1_csr_s$D_IN =
	     { rg_bank1_csr_s[5:4],
	       x__h15428,
	       rg_bank1_csr_p[2:0],
	       IF_ma_train_training_data_BIT_23_36_THEN_IF_ma_ETC___d180 } ;
  assign rg_bank1_csr_s$EN = EN_ma_train ;

  // register rg_bank2_csr_indx
  assign rg_bank2_csr_indx$D_IN =
	     { rg_bank2_csr_indx[8:0],
	       IF_ma_train_training_data_BIT_23_36_THEN_IF_ma_ETC___d149 } ;
  assign rg_bank2_csr_indx$EN = EN_ma_train ;

  // register rg_bank2_csr_p
  assign rg_bank2_csr_p$D_IN =
	     { rg_bank2_csr_p[6:4],
	       x__h15128,
	       rg_bank2_csr_p[2:0],
	       IF_ma_train_training_data_BIT_23_36_THEN_IF_ma_ETC___d190 } ;
  assign rg_bank2_csr_p$EN = EN_ma_train ;

  // register rg_bank2_csr_s
  assign rg_bank2_csr_s$D_IN =
	     { rg_bank2_csr_s[5] ^ rg_global_history[19],
	       rg_bank2_csr_p[4:0],
	       IF_ma_train_training_data_BIT_23_36_THEN_IF_ma_ETC___d220 } ;
  assign rg_bank2_csr_s$EN = EN_ma_train ;

  // register rg_bank3_csr_indx
  assign rg_bank3_csr_indx$D_IN =
	     { rg_bank3_csr_indx[8:0],
	       IF_ma_train_training_data_BIT_23_36_THEN_IF_ma_ETC___d159 } ;
  assign rg_bank3_csr_indx$EN = EN_ma_train ;

  // register rg_bank3_csr_p
  assign rg_bank3_csr_p$D_IN =
	     { rg_bank3_csr_p[6:0],
	       IF_ma_train_training_data_BIT_23_36_THEN_IF_ma_ETC___d198 } ;
  assign rg_bank3_csr_p$EN = EN_ma_train ;

  // register rg_bank3_csr_s
  assign rg_bank3_csr_s$D_IN =
	     { rg_bank3_csr_s[5],
	       x__h15696,
	       rg_bank3_csr_p[3:0],
	       IF_ma_train_training_data_BIT_23_36_THEN_IF_ma_ETC___d229 } ;
  assign rg_bank3_csr_s$EN = EN_ma_train ;

  // register rg_bank4_csr_indx
  assign rg_bank4_csr_indx$D_IN =
	     { rg_bank4_csr_indx[8:0],
	       IF_ma_train_training_data_BIT_23_36_THEN_IF_ma_ETC___d169 } ;
  assign rg_bank4_csr_indx$EN = EN_ma_train ;

  // register rg_bank4_csr_p
  assign rg_bank4_csr_p$D_IN =
	     { rg_bank4_csr_p[6:0],
	       IF_ma_train_training_data_BIT_23_36_THEN_IF_ma_ETC___d206 } ;
  assign rg_bank4_csr_p$EN = EN_ma_train ;

  // register rg_bank4_csr_s
  assign rg_bank4_csr_s$D_IN =
	     { rg_bank4_csr_s[5:3],
	       x__h15844,
	       rg_bank4_csr_p[1:0],
	       IF_ma_train_training_data_BIT_23_36_THEN_IF_ma_ETC___d238 } ;
  assign rg_bank4_csr_s$EN = EN_ma_train ;

  // register rg_bimodal_flush_addr
  assign rg_bimodal_flush_addr$D_IN =
	     MUX_bram_bimodal$b_put_1__SEL_1 ?
	       MUX_rg_bimodal_flush_addr$write_1__VAL_1 :
	       13'd0 ;
  assign rg_bimodal_flush_addr$EN =
	     rg_flush && !rg_bimodal_flush_addr[12] || EN_ma_flush ;

  // register rg_flush
  assign rg_flush$D_IN = !MUX_rg_flush$write_1__SEL_1 ;
  assign rg_flush$EN = rg_flush && rg_bimodal_flush_addr[12] || EN_ma_flush ;

  // register rg_global_flush_addr
  assign rg_global_flush_addr$D_IN =
	     MUX_bram_bank1$b_put_1__SEL_1 ?
	       MUX_rg_global_flush_addr$write_1__VAL_1 :
	       11'd0 ;
  assign rg_global_flush_addr$EN =
	     rg_flush && !rg_global_flush_addr[10] || EN_ma_flush ;

  // register rg_global_history
  assign rg_global_history$D_IN =
	     { rg_global_history[78:0],
	       !(ma_train_training_data[23] ^ ma_train_training_data[22]) } ;
  assign rg_global_history$EN = EN_ma_train ;

  // register rg_init_rand
  assign rg_init_rand$D_IN = 1'd0 ;
  assign rg_init_rand$EN = rg_init_rand ;

  // register rg_pc_copy
  assign rg_pc_copy$D_IN = ma_put_pc ;
  assign rg_pc_copy$EN = EN_ma_put ;

  // submodule bram_bank1
  assign bram_bank1$ADDRA = x__h4921 ^ rg_global_history[9:0] ;
  assign bram_bank1$ADDRB =
	     MUX_bram_bank1$b_put_1__SEL_1 ?
	       rg_global_flush_addr[9:0] :
	       MUX_bram_bank1$b_put_2__VAL_2 ;
  assign bram_bank1$DIA = 12'b101010101010 /* unspecified value */  ;
  assign bram_bank1$DIB =
	     MUX_bram_bank1$b_put_1__SEL_1 ?
	       12'b011000000000 :
	       MUX_bram_bank1$b_put_3__VAL_2 ;
  assign bram_bank1$WEA = 1'd0 ;
  assign bram_bank1$WEB = 1'd1 ;
  assign bram_bank1$ENA = EN_ma_put ;
  assign bram_bank1$ENB =
	     rg_flush && !rg_global_flush_addr[10] ||
	     MUX_bram_bank1$b_put_1__SEL_2 ;

  // submodule bram_bank2
  assign bram_bank2$ADDRA = x__h4921 ^ rg_bank2_csr_indx ;
  assign bram_bank2$ADDRB =
	     MUX_bram_bank1$b_put_1__SEL_1 ?
	       rg_global_flush_addr[9:0] :
	       MUX_bram_bank2$b_put_2__VAL_2 ;
  assign bram_bank2$DIA = 12'b101010101010 /* unspecified value */  ;
  assign bram_bank2$DIB =
	     MUX_bram_bank1$b_put_1__SEL_1 ?
	       12'b011000000000 :
	       MUX_bram_bank2$b_put_3__VAL_2 ;
  assign bram_bank2$WEA = 1'd0 ;
  assign bram_bank2$WEB = 1'd1 ;
  assign bram_bank2$ENA = EN_ma_put ;
  assign bram_bank2$ENB =
	     rg_flush && !rg_global_flush_addr[10] ||
	     EN_ma_train &&
	     (ma_train_training_data[23] &&
	      ma_train_training_data[5:3] == 3'd2 ||
	      NOT_ma_train_training_data_BIT_23_36_64_AND_ma_ETC___d351) ;

  // submodule bram_bank3
  assign bram_bank3$ADDRA = x__h4921 ^ rg_bank3_csr_indx ;
  assign bram_bank3$ADDRB =
	     MUX_bram_bank1$b_put_1__SEL_1 ?
	       rg_global_flush_addr[9:0] :
	       MUX_bram_bank3$b_put_2__VAL_2 ;
  assign bram_bank3$DIA = 12'b101010101010 /* unspecified value */  ;
  assign bram_bank3$DIB =
	     MUX_bram_bank1$b_put_1__SEL_1 ?
	       12'b011000000000 :
	       MUX_bram_bank3$b_put_3__VAL_2 ;
  assign bram_bank3$WEA = 1'd0 ;
  assign bram_bank3$WEB = 1'd1 ;
  assign bram_bank3$ENA = EN_ma_put ;
  assign bram_bank3$ENB =
	     rg_flush && !rg_global_flush_addr[10] ||
	     EN_ma_train &&
	     ma_train_training_data_BIT_23_36_AND_ma_train__ETC___d392 ;

  // submodule bram_bank4
  assign bram_bank4$ADDRA = x__h4921 ^ rg_bank4_csr_indx ;
  assign bram_bank4$ADDRB =
	     MUX_bram_bank1$b_put_1__SEL_1 ?
	       rg_global_flush_addr[9:0] :
	       MUX_bram_bank4$b_put_2__VAL_2 ;
  assign bram_bank4$DIA = 12'b101010101010 /* unspecified value */  ;
  assign bram_bank4$DIB =
	     MUX_bram_bank1$b_put_1__SEL_1 ?
	       12'b011000000000 :
	       MUX_bram_bank4$b_put_3__VAL_2 ;
  assign bram_bank4$WEA = 1'd0 ;
  assign bram_bank4$WEB = 1'd1 ;
  assign bram_bank4$ENA = EN_ma_put ;
  assign bram_bank4$ENB =
	     rg_flush && !rg_global_flush_addr[10] ||
	     EN_ma_train &&
	     (ma_train_training_data[23] &&
	      ma_train_training_data[5:3] == 3'd4 ||
	      NOT_ma_train_training_data_BIT_23_36_64_AND_ma_ETC___d430) ;

  // submodule bram_bimodal
  assign bram_bimodal$ADDRA = ma_put_pc[11:0] ;
  assign bram_bimodal$ADDRB =
	     MUX_bram_bimodal$b_put_1__SEL_1 ?
	       rg_bimodal_flush_addr[11:0] :
	       ma_train_training_data[35:24] ;
  assign bram_bimodal$DIA = 4'b1010 /* unspecified value */  ;
  assign bram_bimodal$DIB =
	     MUX_bram_bimodal$b_put_1__SEL_1 ?
	       4'b0110 :
	       MUX_bram_bimodal$b_put_3__VAL_2 ;
  assign bram_bimodal$WEA = 1'd0 ;
  assign bram_bimodal$WEB = 1'd1 ;
  assign bram_bimodal$ENA = EN_ma_put ;
  assign bram_bimodal$ENB =
	     rg_flush && !rg_bimodal_flush_addr[12] ||
	     EN_ma_train &&
	     ma_train_training_data_BIT_23_36_AND_ma_train__ETC___d269 ;

  // submodule random_bank0
  assign random_bank0$EN = !random_bank0_initialized || EN_ma_train ;

  // submodule random_bank1
  assign random_bank1$EN = !random_bank1_initialized || EN_ma_train ;

  // submodule random_bank2
  assign random_bank2$EN = !random_bank2_initialized || EN_ma_train ;

  // remaining internal signals
  assign IF_ma_train_training_data_BITS_21_TO_19_42_EQ__ETC___d322 =
	     (ma_train_training_data[21:19] == 3'b0) ?
	       x3__h10688 :
	       x3__h16130 ;
  assign IF_ma_train_training_data_BITS_21_TO_19_42_EQ__ETC___d328 =
	     (ma_train_training_data[21:19] == 3'b111) ?
	       x3__h10688 :
	       x3__h10617 ;
  assign IF_ma_train_training_data_BITS_5_TO_3_40_EQ_0__ETC___d273 =
	     (ma_train_training_data[5:3] == 3'd0) ?
	       ma_train_training_data_BITS_21_TO_19_42_PLUS_1___d271 :
	       ma_train_training_data[2:0] ;
  assign IF_ma_train_training_data_BITS_5_TO_3_40_EQ_0__ETC___d275 =
	     (ma_train_training_data[5:3] == 3'd0) ?
	       ma_train_training_data_BITS_21_TO_19_42_MINUS_1___d274 :
	       ma_train_training_data[2:0] ;
  assign IF_ma_train_training_data_BITS_5_TO_3_40_EQ_0__ETC___d323 =
	     (ma_train_training_data[5:3] == 3'd0) ?
	       { IF_ma_train_training_data_BIT_10_77_THEN_0b11__ETC___d313,
		 lv_new_tag1__h5129,
		 1'b0 } :
	       IF_ma_train_training_data_BITS_21_TO_19_42_EQ__ETC___d322 ;
  assign IF_ma_train_training_data_BITS_5_TO_3_40_EQ_0__ETC___d329 =
	     (ma_train_training_data[5:3] == 3'd0) ?
	       { IF_ma_train_training_data_BIT_10_77_OR_ma_trai_ETC___d325,
		 lv_new_tag1__h5129,
		 1'b0 } :
	       IF_ma_train_training_data_BITS_21_TO_19_42_EQ__ETC___d328 ;
  assign IF_ma_train_training_data_BIT_10_77_OR_ma_trai_ETC___d325 =
	     (ma_train_training_data[10] || ma_train_training_data[2]) ?
	       3'b100 :
	       3'b011 ;
  assign IF_ma_train_training_data_BIT_10_77_THEN_0b11__ETC___d313 =
	     ma_train_training_data[10] ?
	       3'b011 :
	       (ma_train_training_data[2] ? 3'b100 : 3'b011) ;
  assign IF_ma_train_training_data_BIT_22_37_THEN_IF_ma_ETC___d310 =
	     ma_train_training_data[22] ?
	       ((ma_train_training_data[21:19] == 3'b111) ?
		  x3__h7017 :
		  x3__h6884) :
	       ((ma_train_training_data[21:19] == 3'b0) ?
		  x3__h7017 :
		  x3__h8893) ;
  assign IF_ma_train_training_data_BIT_23_36_THEN_IF_ma_ETC___d149 =
	     ma_train_training_data[23] ?
	       (ma_train_training_data[22] ?
		  INV_rg_global_history_08_BIT_19_42_43_XOR_rg_b_ETC___d145 :
		  x__h14731) :
	       (ma_train_training_data[22] ?
		  x__h14731 :
		  INV_rg_global_history_08_BIT_19_42_43_XOR_rg_b_ETC___d145) ;
  assign IF_ma_train_training_data_BIT_23_36_THEN_IF_ma_ETC___d159 =
	     ma_train_training_data[23] ?
	       (ma_train_training_data[22] ?
		  INV_rg_global_history_08_BIT_39_52_53_XOR_rg_b_ETC___d155 :
		  x__h14807) :
	       (ma_train_training_data[22] ?
		  x__h14807 :
		  INV_rg_global_history_08_BIT_39_52_53_XOR_rg_b_ETC___d155) ;
  assign IF_ma_train_training_data_BIT_23_36_THEN_IF_ma_ETC___d169 =
	     ma_train_training_data[23] ?
	       (ma_train_training_data[22] ?
		  INV_rg_global_history_08_BIT_79_62_63_XOR_rg_b_ETC___d165 :
		  x__h14883) :
	       (ma_train_training_data[22] ?
		  x__h14883 :
		  INV_rg_global_history_08_BIT_79_62_63_XOR_rg_b_ETC___d165) ;
  assign IF_ma_train_training_data_BIT_23_36_THEN_IF_ma_ETC___d180 =
	     ma_train_training_data[23] ?
	       (ma_train_training_data[22] ? x__h9984 : rg_bank1_csr_p[7]) :
	       (ma_train_training_data[22] ? rg_bank1_csr_p[7] : x__h9984) ;
  assign IF_ma_train_training_data_BIT_23_36_THEN_IF_ma_ETC___d190 =
	     ma_train_training_data[23] ?
	       (ma_train_training_data[22] ? x__h9681 : rg_bank2_csr_p[7]) :
	       (ma_train_training_data[22] ? rg_bank2_csr_p[7] : x__h9681) ;
  assign IF_ma_train_training_data_BIT_23_36_THEN_IF_ma_ETC___d198 =
	     ma_train_training_data[23] ?
	       (ma_train_training_data[22] ? x__h9736 : x__h15255) :
	       (ma_train_training_data[22] ? x__h15255 : x__h9736) ;
  assign IF_ma_train_training_data_BIT_23_36_THEN_IF_ma_ETC___d206 =
	     ma_train_training_data[23] ?
	       (ma_train_training_data[22] ? x__h9813 : x__h15331) :
	       (ma_train_training_data[22] ? x__h15331 : x__h9813) ;
  assign IF_ma_train_training_data_BIT_23_36_THEN_IF_ma_ETC___d220 =
	     ma_train_training_data[23] ?
	       (ma_train_training_data[22] ? x__h10105 : rg_bank2_csr_p[6]) :
	       (ma_train_training_data[22] ? rg_bank2_csr_p[6] : x__h10105) ;
  assign IF_ma_train_training_data_BIT_23_36_THEN_IF_ma_ETC___d229 =
	     ma_train_training_data[23] ?
	       (ma_train_training_data[22] ? x__h10254 : rg_bank3_csr_p[7]) :
	       (ma_train_training_data[22] ? rg_bank3_csr_p[7] : x__h10254) ;
  assign IF_ma_train_training_data_BIT_23_36_THEN_IF_ma_ETC___d238 =
	     ma_train_training_data[23] ?
	       (ma_train_training_data[22] ? x__h10403 : rg_bank4_csr_p[7]) :
	       (ma_train_training_data[22] ? rg_bank4_csr_p[7] : x__h10403) ;
  assign IF_wr_bank2_out_wget__3_BITS_8_TO_1_0_EQ_rg_pc_ETC___d68 =
	     wr_bank2_out_wget__3_BITS_8_TO_1_0_EQ_rg_pc_co_ETC___d56 ?
	       bram_bank2$DOA[11] :
	       (wr_bank1_out_wget__1_BITS_8_TO_1_8_EQ_rg_pc_co_ETC___d64 ?
		  bram_bank1$DOA[11] :
		  bram_bimodal$DOA[3]) ;
  assign IF_wr_bank2_out_wget__3_BITS_8_TO_1_0_EQ_rg_pc_ETC___d76 =
	     wr_bank2_out_wget__3_BITS_8_TO_1_0_EQ_rg_pc_co_ETC___d56 ?
	       bram_bank2$DOA[11:9] :
	       (wr_bank1_out_wget__1_BITS_8_TO_1_8_EQ_rg_pc_co_ETC___d64 ?
		  bram_bank1$DOA[11:9] :
		  bram_bimodal$DOA[3:1]) ;
  assign IF_wr_bank3_out_wget__5_BITS_8_TO_1_2_EQ_rg_pc_ETC___d81 =
	     wr_bank3_out_wget__5_BITS_8_TO_1_2_EQ_rg_pc_co_ETC___d48 ?
	       bram_bank3$DOA[8:1] :
	       (wr_bank2_out_wget__3_BITS_8_TO_1_0_EQ_rg_pc_co_ETC___d56 ?
		  bram_bank2$DOA[8:1] :
		  bram_bank1$DOA[8:1]) ;
  assign IF_wr_bank3_out_wget__5_BITS_8_TO_1_2_EQ_rg_pc_ETC___d85 =
	     wr_bank3_out_wget__5_BITS_8_TO_1_2_EQ_rg_pc_co_ETC___d48 ?
	       3'b011 :
	       (wr_bank2_out_wget__3_BITS_8_TO_1_0_EQ_rg_pc_co_ETC___d56 ?
		  3'b010 :
		  (wr_bank1_out_wget__1_BITS_8_TO_1_8_EQ_rg_pc_co_ETC___d64 ?
		     3'b001 :
		     3'b0)) ;
  assign INV_rg_global_history_08_BIT_19_42_43_XOR_rg_b_ETC___d145 =
	     x__h9208 ^ rg_bank2_csr_indx[9] ;
  assign INV_rg_global_history_08_BIT_39_52_53_XOR_rg_b_ETC___d155 =
	     x__h9737 ^ rg_bank3_csr_indx[9] ;
  assign INV_rg_global_history_08_BIT_79_62_63_XOR_rg_b_ETC___d165 =
	     x__h9814 ^ rg_bank4_csr_indx[9] ;
  assign NOT_ma_train_training_data_BITS_5_TO_3_40_EQ_0_ETC___d389 =
	     ma_train_training_data[5:3] == 3'd1 &&
	     (ma_train_training_data[8:6] == 3'b111 &&
	      random_bank1$OUT == 3'd3 ||
	      !ma_train_training_data[7]) ||
	     ma_train_training_data[5:3] == 3'd2 &&
	     (ma_train_training_data[7:6] == 2'b11 &&
	      random_bank2$OUT == 3'd3 ||
	      !ma_train_training_data[7]) ||
	     ma_train_training_data[5:3] == 3'd3 ;
  assign NOT_ma_train_training_data_BIT_23_36_64_AND_ma_ETC___d351 =
	     !ma_train_training_data[23] &&
	     (ma_train_training_data[5:3] == 3'd0 &&
	      (ma_train_training_data[9:6] == 4'b1111 &&
	       random_bank0$OUT == 3'd2 ||
	       !ma_train_training_data[8]) ||
	      ma_train_training_data[5:3] == 3'd1 &&
	      (ma_train_training_data[8:6] == 3'b111 &&
	       random_bank1$OUT == 3'd2 ||
	       !ma_train_training_data[8]) ||
	      ma_train_training_data[5:3] == 3'd2) ;
  assign NOT_ma_train_training_data_BIT_23_36_64_AND_ma_ETC___d430 =
	     !ma_train_training_data[23] &&
	     (ma_train_training_data[5:3] == 3'd0 &&
	      (ma_train_training_data[9:6] == 4'b1111 &&
	       random_bank0$OUT == 3'd4 ||
	       !ma_train_training_data[6]) ||
	      ma_train_training_data[5:3] != 3'd0 &&
	      ma_train_training_data_BITS_5_TO_3_40_EQ_1_47__ETC___d427) ;
  assign lv_new_tag1__h5129 = x__h11721 ^ y__h11722 ;
  assign lv_new_tag2__h5130 = x__h11953 ^ y__h11954 ;
  assign lv_new_tag3__h5131 = x__h12000 ^ y__h12001 ;
  assign lv_new_tag4__h5132 = x__h12047 ^ y__h12048 ;
  assign ma_train_training_data_BITS_21_TO_19_42_MINUS_1___d274 =
	     ma_train_training_data[21:19] - 3'd1 ;
  assign ma_train_training_data_BITS_21_TO_19_42_PLUS_1___d271 =
	     ma_train_training_data[21:19] + 3'd1 ;
  assign ma_train_training_data_BITS_5_TO_3_40_EQ_1_47__ETC___d427 =
	     ma_train_training_data[5:3] == 3'd1 &&
	     (ma_train_training_data[8:6] == 3'b111 &&
	      random_bank1$OUT == 3'd4 ||
	      !ma_train_training_data[6]) ||
	     ma_train_training_data[5:3] == 3'd2 &&
	     (ma_train_training_data[7:6] == 2'b11 &&
	      random_bank2$OUT == 3'd4 ||
	      !ma_train_training_data[6]) ||
	     ma_train_training_data[5:3] == 3'd3 ||
	     ma_train_training_data[5:3] == 3'd4 ;
  assign ma_train_training_data_BIT_23_36_AND_ma_train__ETC___d269 =
	     ma_train_training_data[23] &&
	     (ma_train_training_data[22] &&
	      (ma_train_training_data[5:3] == 3'd0 &&
	       ma_train_training_data[21:19] != 3'b111 ||
	       ma_train_training_data[5:3] == 3'd1 ||
	       ma_train_training_data[5:3] == 3'd2 ||
	       ma_train_training_data[5:3] == 3'd3 ||
	       ma_train_training_data[5:3] == 3'd4) ||
	      !ma_train_training_data[22] &&
	      (ma_train_training_data[5:3] == 3'd0 &&
	       ma_train_training_data[21:19] != 3'b0 ||
	       ma_train_training_data[5:3] == 3'd1 ||
	       ma_train_training_data[5:3] == 3'd2 ||
	       ma_train_training_data[5:3] == 3'd3 ||
	       ma_train_training_data[5:3] == 3'd4)) ||
	     !ma_train_training_data[23] &&
	     (ma_train_training_data[22] &&
	      (ma_train_training_data[5:3] == 3'd0 &&
	       ma_train_training_data[21:19] != 3'b0 ||
	       ma_train_training_data[5:3] == 3'd1 ||
	       ma_train_training_data[5:3] == 3'd2 ||
	       ma_train_training_data[5:3] == 3'd3 ||
	       ma_train_training_data[5:3] == 3'd4) ||
	      !ma_train_training_data[22] &&
	      (ma_train_training_data[5:3] == 3'd0 &&
	       ma_train_training_data[21:19] != 3'b111 ||
	       ma_train_training_data[5:3] == 3'd1 ||
	       ma_train_training_data[5:3] == 3'd2 ||
	       ma_train_training_data[5:3] == 3'd3 ||
	       ma_train_training_data[5:3] == 3'd4)) ;
  assign ma_train_training_data_BIT_23_36_AND_ma_train__ETC___d392 =
	     ma_train_training_data[23] &&
	     ma_train_training_data[5:3] == 3'd3 ||
	     !ma_train_training_data[23] &&
	     (ma_train_training_data[5:3] == 3'd0 &&
	      (ma_train_training_data[9:6] == 4'b1111 &&
	       random_bank0$OUT == 3'd3 ||
	       !ma_train_training_data[7]) ||
	      NOT_ma_train_training_data_BITS_5_TO_3_40_EQ_0_ETC___d389) ;
  assign mn_get_bank_bits__h5006 =
	     { bram_bimodal$DOA[0],
	       bram_bank1$DOA[0],
	       bram_bank2$DOA[0],
	       bram_bank3$DOA[0],
	       bram_bank4$DOA[0] } ;
  assign mn_get_prediction__h5003 =
	     wr_bank4_out_wget__7_BITS_8_TO_1_2_EQ_rg_pc_co_ETC___d40 ?
	       bram_bank4$DOA[11] :
	       (wr_bank3_out_wget__5_BITS_8_TO_1_2_EQ_rg_pc_co_ETC___d48 ?
		  bram_bank3$DOA[11] :
		  IF_wr_bank2_out_wget__3_BITS_8_TO_1_0_EQ_rg_pc_ETC___d68) ;
  assign mn_get_tag__h5005 =
	     wr_bank4_out_wget__7_BITS_8_TO_1_2_EQ_rg_pc_co_ETC___d40 ?
	       bram_bank4$DOA[8:1] :
	       IF_wr_bank3_out_wget__5_BITS_8_TO_1_2_EQ_rg_pc_ETC___d81 ;
  assign wr_bank1_out_wget__1_BITS_8_TO_1_8_EQ_rg_pc_co_ETC___d64 =
	     bram_bank1$DOA[8:1] == y__h3005 ;
  assign wr_bank2_out_wget__3_BITS_8_TO_1_0_EQ_rg_pc_co_ETC___d56 =
	     bram_bank2$DOA[8:1] == y__h2936 ;
  assign wr_bank3_out_wget__5_BITS_8_TO_1_2_EQ_rg_pc_co_ETC___d48 =
	     bram_bank3$DOA[8:1] == y__h2867 ;
  assign wr_bank4_out_wget__7_BITS_8_TO_1_2_EQ_rg_pc_co_ETC___d40 =
	     bram_bank4$DOA[8:1] == y__h2797 ;
  assign x3__h10617 =
	     { ma_train_training_data_BITS_21_TO_19_42_PLUS_1___d271,
	       ma_train_training_data[18:11],
	       1'b0 } ;
  assign x3__h10688 = { ma_train_training_data[21:11], 1'b0 } ;
  assign x3__h16130 =
	     { ma_train_training_data_BITS_21_TO_19_42_MINUS_1___d274,
	       ma_train_training_data[18:11],
	       1'b0 } ;
  assign x3__h6884 =
	     { ma_train_training_data_BITS_21_TO_19_42_PLUS_1___d271,
	       ma_train_training_data[18:11],
	       1'b1 } ;
  assign x3__h7017 = { ma_train_training_data[21:11], 1'b1 } ;
  assign x3__h8893 =
	     { ma_train_training_data_BITS_21_TO_19_42_MINUS_1___d274,
	       ma_train_training_data[18:11],
	       1'b1 } ;
  assign x__h10105 = ~rg_bank2_csr_p[6] ;
  assign x__h10254 = ~rg_bank3_csr_p[7] ;
  assign x__h10403 = ~rg_bank4_csr_p[7] ;
  assign x__h11721 = ma_train_training_data[31:24] ^ rg_bank1_csr_p ;
  assign x__h11953 = ma_train_training_data[31:24] ^ rg_bank2_csr_p ;
  assign x__h12000 = ma_train_training_data[31:24] ^ rg_bank3_csr_p ;
  assign x__h12047 = ma_train_training_data[31:24] ^ rg_bank4_csr_p ;
  assign x__h14731 = rg_global_history[19] ^ rg_bank2_csr_indx[9] ;
  assign x__h14807 = rg_global_history[39] ^ rg_bank3_csr_indx[9] ;
  assign x__h14883 = rg_global_history[79] ^ rg_bank4_csr_indx[9] ;
  assign x__h14980 = rg_global_history[9] ^ rg_bank1_csr_p[5] ;
  assign x__h15128 = rg_global_history[19] ^ rg_bank2_csr_p[3] ;
  assign x__h15255 = rg_global_history[39] ^ rg_bank3_csr_p[7] ;
  assign x__h15331 = rg_global_history[79] ^ rg_bank4_csr_p[7] ;
  assign x__h15428 = rg_global_history[9] ^ rg_bank1_csr_p[2] ;
  assign x__h15696 = rg_global_history[39] ^ rg_bank3_csr_p[4] ;
  assign x__h15844 = rg_global_history[79] ^ rg_bank4_csr_p[2] ;
  assign x__h2833 = rg_pc_copy[7:0] ^ rg_bank4_csr_p ;
  assign x__h2903 = rg_pc_copy[7:0] ^ rg_bank3_csr_p ;
  assign x__h2972 = rg_pc_copy[7:0] ^ rg_bank2_csr_p ;
  assign x__h3041 = rg_pc_copy[7:0] ^ rg_bank1_csr_p ;
  assign x__h4921 = ma_put_pc[9:0] ^ ma_put_pc[19:10] ;
  assign x__h5046 =
	     wr_bank4_out_wget__7_BITS_8_TO_1_2_EQ_rg_pc_co_ETC___d40 ?
	       bram_bank4$DOA[11:9] :
	       (wr_bank3_out_wget__5_BITS_8_TO_1_2_EQ_rg_pc_co_ETC___d48 ?
		  bram_bank3$DOA[11:9] :
		  IF_wr_bank2_out_wget__3_BITS_8_TO_1_0_EQ_rg_pc_ETC___d76) ;
  assign x__h5062 =
	     wr_bank4_out_wget__7_BITS_8_TO_1_2_EQ_rg_pc_co_ETC___d40 ?
	       3'b100 :
	       IF_wr_bank3_out_wget__5_BITS_8_TO_1_2_EQ_rg_pc_ETC___d85 ;
  assign x__h7302 =
	     ma_train_training_data[33:24] ^ ma_train_training_data[43:34] ;
  assign x__h9208 = ~rg_global_history[19] ;
  assign x__h9681 = ~rg_bank2_csr_p[7] ;
  assign x__h9736 = x__h9737 ^ rg_bank3_csr_p[7] ;
  assign x__h9737 = ~rg_global_history[39] ;
  assign x__h9813 = x__h9814 ^ rg_bank4_csr_p[7] ;
  assign x__h9814 = ~rg_global_history[79] ;
  assign x__h9984 = ~rg_bank1_csr_p[7] ;
  assign y__h11722 = { rg_bank1_csr_s, 1'b0 } ;
  assign y__h11954 = { rg_bank2_csr_s, 1'b0 } ;
  assign y__h12001 = { rg_bank3_csr_s, 1'b0 } ;
  assign y__h12048 = { rg_bank4_csr_s, 1'b0 } ;
  assign y__h2797 = x__h2833 ^ y__h12048 ;
  assign y__h2867 = x__h2903 ^ y__h12001 ;
  assign y__h2936 = x__h2972 ^ y__h11954 ;
  assign y__h3005 = x__h3041 ^ y__h11722 ;
  always@(ma_train_training_data or
	  IF_ma_train_training_data_BITS_21_TO_19_42_EQ__ETC___d322 or
	  IF_ma_train_training_data_BIT_10_77_THEN_0b11__ETC___d313 or
	  lv_new_tag3__h5131)
  begin
    case (ma_train_training_data[5:3])
      3'd0, 3'd1, 3'd2:
	  IF_ma_train_training_data_BITS_5_TO_3_40_EQ_0__ETC___d400 =
	      { IF_ma_train_training_data_BIT_10_77_THEN_0b11__ETC___d313,
		lv_new_tag3__h5131,
		1'b0 };
      default: IF_ma_train_training_data_BITS_5_TO_3_40_EQ_0__ETC___d400 =
		   IF_ma_train_training_data_BITS_21_TO_19_42_EQ__ETC___d322;
    endcase
  end
  always@(ma_train_training_data or
	  IF_ma_train_training_data_BITS_21_TO_19_42_EQ__ETC___d328 or
	  IF_ma_train_training_data_BIT_10_77_OR_ma_trai_ETC___d325 or
	  lv_new_tag3__h5131)
  begin
    case (ma_train_training_data[5:3])
      3'd0, 3'd1, 3'd2:
	  IF_ma_train_training_data_BITS_5_TO_3_40_EQ_0__ETC___d402 =
	      { IF_ma_train_training_data_BIT_10_77_OR_ma_trai_ETC___d325,
		lv_new_tag3__h5131,
		1'b0 };
      default: IF_ma_train_training_data_BITS_5_TO_3_40_EQ_0__ETC___d402 =
		   IF_ma_train_training_data_BITS_21_TO_19_42_EQ__ETC___d328;
    endcase
  end
  always@(ma_train_training_data or
	  IF_ma_train_training_data_BITS_21_TO_19_42_EQ__ETC___d322 or
	  IF_ma_train_training_data_BIT_10_77_THEN_0b11__ETC___d313 or
	  lv_new_tag4__h5132)
  begin
    case (ma_train_training_data[5:3])
      3'd0, 3'd1, 3'd2, 3'd3:
	  IF_ma_train_training_data_BITS_5_TO_3_40_EQ_0__ETC___d440 =
	      { IF_ma_train_training_data_BIT_10_77_THEN_0b11__ETC___d313,
		lv_new_tag4__h5132,
		1'b0 };
      default: IF_ma_train_training_data_BITS_5_TO_3_40_EQ_0__ETC___d440 =
		   IF_ma_train_training_data_BITS_21_TO_19_42_EQ__ETC___d322;
    endcase
  end
  always@(ma_train_training_data or
	  IF_ma_train_training_data_BITS_21_TO_19_42_EQ__ETC___d328 or
	  IF_ma_train_training_data_BIT_10_77_OR_ma_trai_ETC___d325 or
	  lv_new_tag4__h5132)
  begin
    case (ma_train_training_data[5:3])
      3'd0, 3'd1, 3'd2, 3'd3:
	  IF_ma_train_training_data_BITS_5_TO_3_40_EQ_0__ETC___d442 =
	      { IF_ma_train_training_data_BIT_10_77_OR_ma_trai_ETC___d325,
		lv_new_tag4__h5132,
		1'b0 };
      default: IF_ma_train_training_data_BITS_5_TO_3_40_EQ_0__ETC___d442 =
		   IF_ma_train_training_data_BITS_21_TO_19_42_EQ__ETC___d328;
    endcase
  end
  always@(ma_train_training_data or
	  IF_ma_train_training_data_BITS_21_TO_19_42_EQ__ETC___d322 or
	  IF_ma_train_training_data_BIT_10_77_THEN_0b11__ETC___d313 or
	  lv_new_tag2__h5130)
  begin
    case (ma_train_training_data[5:3])
      3'd0, 3'd1:
	  CASE_ma_train_training_data_BITS_5_TO_3_0_IF_m_ETC__q1 =
	      { IF_ma_train_training_data_BIT_10_77_THEN_0b11__ETC___d313,
		lv_new_tag2__h5130,
		1'b0 };
      default: CASE_ma_train_training_data_BITS_5_TO_3_0_IF_m_ETC__q1 =
		   IF_ma_train_training_data_BITS_21_TO_19_42_EQ__ETC___d322;
    endcase
  end
  always@(ma_train_training_data or
	  IF_ma_train_training_data_BITS_21_TO_19_42_EQ__ETC___d328 or
	  IF_ma_train_training_data_BIT_10_77_OR_ma_trai_ETC___d325 or
	  lv_new_tag2__h5130)
  begin
    case (ma_train_training_data[5:3])
      3'd0, 3'd1:
	  CASE_ma_train_training_data_BITS_5_TO_3_0_IF_m_ETC__q2 =
	      { IF_ma_train_training_data_BIT_10_77_OR_ma_trai_ETC___d325,
		lv_new_tag2__h5130,
		1'b0 };
      default: CASE_ma_train_training_data_BITS_5_TO_3_0_IF_m_ETC__q2 =
		   IF_ma_train_training_data_BITS_21_TO_19_42_EQ__ETC___d328;
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        random_bank0_initialized <= `BSV_ASSIGNMENT_DELAY 1'd0;
	random_bank1_initialized <= `BSV_ASSIGNMENT_DELAY 1'd0;
	random_bank2_initialized <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_bank1_csr_p <= `BSV_ASSIGNMENT_DELAY 8'd0;
	rg_bank1_csr_s <= `BSV_ASSIGNMENT_DELAY 7'd0;
	rg_bank2_csr_indx <= `BSV_ASSIGNMENT_DELAY 10'd0;
	rg_bank2_csr_p <= `BSV_ASSIGNMENT_DELAY 8'd0;
	rg_bank2_csr_s <= `BSV_ASSIGNMENT_DELAY 7'd0;
	rg_bank3_csr_indx <= `BSV_ASSIGNMENT_DELAY 10'd0;
	rg_bank3_csr_p <= `BSV_ASSIGNMENT_DELAY 8'd0;
	rg_bank3_csr_s <= `BSV_ASSIGNMENT_DELAY 7'd0;
	rg_bank4_csr_indx <= `BSV_ASSIGNMENT_DELAY 10'd0;
	rg_bank4_csr_p <= `BSV_ASSIGNMENT_DELAY 8'd0;
	rg_bank4_csr_s <= `BSV_ASSIGNMENT_DELAY 7'd0;
	rg_bimodal_flush_addr <= `BSV_ASSIGNMENT_DELAY 13'd0;
	rg_flush <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_global_flush_addr <= `BSV_ASSIGNMENT_DELAY 11'd0;
	rg_global_history <= `BSV_ASSIGNMENT_DELAY 80'd0;
	rg_init_rand <= `BSV_ASSIGNMENT_DELAY 1'd1;
	rg_pc_copy <= `BSV_ASSIGNMENT_DELAY 32'd0;
      end
    else
      begin
        if (random_bank0_initialized$EN)
	  random_bank0_initialized <= `BSV_ASSIGNMENT_DELAY
	      random_bank0_initialized$D_IN;
	if (random_bank1_initialized$EN)
	  random_bank1_initialized <= `BSV_ASSIGNMENT_DELAY
	      random_bank1_initialized$D_IN;
	if (random_bank2_initialized$EN)
	  random_bank2_initialized <= `BSV_ASSIGNMENT_DELAY
	      random_bank2_initialized$D_IN;
	if (rg_bank1_csr_p$EN)
	  rg_bank1_csr_p <= `BSV_ASSIGNMENT_DELAY rg_bank1_csr_p$D_IN;
	if (rg_bank1_csr_s$EN)
	  rg_bank1_csr_s <= `BSV_ASSIGNMENT_DELAY rg_bank1_csr_s$D_IN;
	if (rg_bank2_csr_indx$EN)
	  rg_bank2_csr_indx <= `BSV_ASSIGNMENT_DELAY rg_bank2_csr_indx$D_IN;
	if (rg_bank2_csr_p$EN)
	  rg_bank2_csr_p <= `BSV_ASSIGNMENT_DELAY rg_bank2_csr_p$D_IN;
	if (rg_bank2_csr_s$EN)
	  rg_bank2_csr_s <= `BSV_ASSIGNMENT_DELAY rg_bank2_csr_s$D_IN;
	if (rg_bank3_csr_indx$EN)
	  rg_bank3_csr_indx <= `BSV_ASSIGNMENT_DELAY rg_bank3_csr_indx$D_IN;
	if (rg_bank3_csr_p$EN)
	  rg_bank3_csr_p <= `BSV_ASSIGNMENT_DELAY rg_bank3_csr_p$D_IN;
	if (rg_bank3_csr_s$EN)
	  rg_bank3_csr_s <= `BSV_ASSIGNMENT_DELAY rg_bank3_csr_s$D_IN;
	if (rg_bank4_csr_indx$EN)
	  rg_bank4_csr_indx <= `BSV_ASSIGNMENT_DELAY rg_bank4_csr_indx$D_IN;
	if (rg_bank4_csr_p$EN)
	  rg_bank4_csr_p <= `BSV_ASSIGNMENT_DELAY rg_bank4_csr_p$D_IN;
	if (rg_bank4_csr_s$EN)
	  rg_bank4_csr_s <= `BSV_ASSIGNMENT_DELAY rg_bank4_csr_s$D_IN;
	if (rg_bimodal_flush_addr$EN)
	  rg_bimodal_flush_addr <= `BSV_ASSIGNMENT_DELAY
	      rg_bimodal_flush_addr$D_IN;
	if (rg_flush$EN) rg_flush <= `BSV_ASSIGNMENT_DELAY rg_flush$D_IN;
	if (rg_global_flush_addr$EN)
	  rg_global_flush_addr <= `BSV_ASSIGNMENT_DELAY
	      rg_global_flush_addr$D_IN;
	if (rg_global_history$EN)
	  rg_global_history <= `BSV_ASSIGNMENT_DELAY rg_global_history$D_IN;
	if (rg_init_rand$EN)
	  rg_init_rand <= `BSV_ASSIGNMENT_DELAY rg_init_rand$D_IN;
	if (rg_pc_copy$EN)
	  rg_pc_copy <= `BSV_ASSIGNMENT_DELAY rg_pc_copy$D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    random_bank0_initialized = 1'h0;
    random_bank1_initialized = 1'h0;
    random_bank2_initialized = 1'h0;
    rg_bank1_csr_p = 8'hAA;
    rg_bank1_csr_s = 7'h2A;
    rg_bank2_csr_indx = 10'h2AA;
    rg_bank2_csr_p = 8'hAA;
    rg_bank2_csr_s = 7'h2A;
    rg_bank3_csr_indx = 10'h2AA;
    rg_bank3_csr_p = 8'hAA;
    rg_bank3_csr_s = 7'h2A;
    rg_bank4_csr_indx = 10'h2AA;
    rg_bank4_csr_p = 8'hAA;
    rg_bank4_csr_s = 7'h2A;
    rg_bimodal_flush_addr = 13'h0AAA;
    rg_flush = 1'h0;
    rg_global_flush_addr = 11'h2AA;
    rg_global_history = 80'hAAAAAAAAAAAAAAAAAAAA;
    rg_init_rand = 1'h0;
    rg_pc_copy = 32'hAAAAAAAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on
endmodule  // mkbranch

